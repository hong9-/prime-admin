// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?

  // db for work
  role              Role
  needPasswordReset Boolean
  hash              String          @default("yo033lcrEG2PNL4W1-wkMun3BYCUxLXmpjQttMTDUIep2eHX5JzO8FrKH-yt9QE8NSYtPQF6utTU9qGYfeC_6w")

  Session           Session[]
  Account           Account?
  // Optional for WebAuthn support
  Authenticator     Authenticator[]

  // db for work
  Notifications     Notification[]
  Schedule          Schedule[]                              // as TM: 스케줄을 만들거나 관찰하는 사람.
  WorkingSchedule   Schedule[]  @relation("WorkerSchedule")  // as SALES: 이행해야할 스케줄

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  managers          User[]      @relation("Managed")
  workers           User[]      @relation("Managed")

  @@index([id, email])
}

model Notification {
  id        String    @id @default(cuid())
  userId    String
  message   String
  link      String
  confirmed Boolean   @default(false)
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id])
  @@index([createdAt])
}

model Schedule {
  id          Int  @id @default(autoincrement())
  date        DateTime
  address     String
  creatorId   String
  note        String?
  result      ScheduleResult @default(NOTYET)

  manager     User[]  @relation("WorkerSchedule") // 스케줄을 이행하고 결과를 반영하는 사람.
  viewer      User[]                              // 스케줄을 관찰하고 결과를 지켜보는 사람 목록.
  // creator User @relation(fields: [creatorId], references: [id])

  @@index([date, id, address, result])
}

model Account {
  id                        String  @id @default(cuid())
  userId                    String  @unique
  type                      String
  provider                  String
  providerAccountId         String
  refresh_token             String? @db.Text
  access_token              String? @db.Text
  expires_at                Int?
  token_type                String?
  scope                     String?
  id_token                  String? @db.Text
  session_state             String?
  refresh_token_expires_in  Int?
  user                      User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum Role {
  ADMIN
  TM
  SALES
}

enum ScheduleResult {
  NOTYET
  CONTRACT
  HOLD
  NOTINTERESTED
}